# Q5 -Write one more example of a problem that you can solve using both DP and Greedy.?


Bellman Ford’s algorithm and Dijkstra’s algorithm both are single-source shortest path algorithm, 
i.e. both determines the shortest distance of each vertex of a graph from a single source vertex. 
However, there are some key differences between them.

We follow the Dynamic Programming approach in Bellman Ford’s algorithm and Greedy approach in Dijkstra’s algorithm.

**Bellman Ford’s algorithm**

Like other Dynamic Programming Problems, the algorithm calculates shortest paths in a bottom-up manner.
It first calculates the shortest distances which have at-most one edge in the path.
Then, it calculates the shortest paths with at-most 2 edges, and so on.
After the i-th iteration of outer loop, the shortest paths with at most i edges are calculated.
There can be maximum |V| – 1 edge in any simple path, that is why the outer loop runs |v| – 1 time.
The idea is, assuming that there is no negative weight cycle if we have calculated shortest paths with at most i edges, 
then an iteration over all edges guarantees to give the shortest path with at-most (i+1) edges 

**Dijkstra’s algorithm**

Dijkstra’s algorithm is very similar to Prim’s algorithm for minimum spanning tree.
Like Prim’s MST, we generate an SPT (shortest path tree) with a given source as root.
We maintain two sets, one set contains vertices included in the shortest-path tree, 
other set includes vertices not yet included in the shortest-path tree.
At every step of the algorithm, we find a vertex which is in the other set (set of not yet included)
and has a minimum distance from the source. 

THE CODES HAVE BEEN PROVIDED IN THIS SAME GITHUB AND FOR THE MATTER OF CONVINIENCE ,
SAMPLE TEST CASE HAD BEEN PROVIDED.
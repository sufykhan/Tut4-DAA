//https://www.random.org/integer-sets/?sets=1&num=5&min=10&max=50&seqnos=on&commas=on&order=random&format=html&rnd=new

Random Generated Set for Values Array ==> 12, 44, 45, 21, 46
Weight Array==> 15 10 9 5 13
CAvg==> 10.4

The basic idea of the greedy approach is to calculate 
the ratio value/weight for each item and 
sort the item on basis of this ratio. 
Then take the item with the highest ratio 
and add them until we canâ€™t add the next item as a whole
and at the end add the next item as much as we can.

The value/weight of the array is computed as below:

V/W==>  0.8  4.4  5   4.2  3.53846
V  ==>  12   44   45  21   46
W  ==>  15   10   9   5   13 

So sorting on the basis of V/W we get:

V  ==>  45  44   21  46  12 
W  ==>  9   10   5   13  15

Target ==>10.4

We first take (45,9) and add it to the knapsack.
Knapsack capacity left==> 1.4 and value==> 45

We then take (44,10) but 10 is greater than 1.4 so taking fractional values
therfore  value=45+ 1.4*(44/100)=51.16;

Therefore ans is 51.16;

The greedy approach and the DP approach will give the same result
because in this particular question the answer could be maximised by
taking the corresponding value by weight maximum point.

The DP approach is modified in this example ,
we have to find the max value of the knapsack by taking the next greatest
value of decimal point of the weight array.
In the DP approach we could either take the weight or donot take the weight,
just like the 0/1 knapsack.
This procedure is done in bottom up approach to get the maximum value.
After that we have tp add that decimal value weight by iterating through each
weight and get the maximum value for the same.

The greedy and DP approach will both give the same result. However it is worthy
to note that last step of dp is somewhat greedy.







